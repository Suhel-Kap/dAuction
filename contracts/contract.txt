// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;
import "@tableland/evm/contracts/ITablelandTables.sol";
import "@tableland/evm/contracts/utils/TablelandDeployments.sol";
import "@tableland/evm/contracts/ITablelandController.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "./utils/SQLHelpers.sol";

contract Auction {
    //  An event is an inheritable member of the contract, which stores the arguments passed in the transaction logs when emitted. Generally, events are used to inform the calling application about the current state of the contract, with the help of the logging facility of EVM.
    event Start();
    event BidMade(address indexed sender, uint amount);
    event Withdraw(address indexed bidder, uint amount);

    //  The struct is a user-defined data type that can be used to store a collection of data of different data types. It is a collection of variables of different types under a single name.
    struct Bid {
        address bidder;
        uint amount;
    }

    // counters is used to keep track of the number of products that are listed.
    using Counters for Counters.Counter;
    Counters.Counter private tokenID;
    string private _baseURIString;

    // tableland is used to store data in SQL fashion on the blockchain.
    ITablelandTables private tablelandContract;

    // a mapping is like a dictionary in python. It stores key-value pairs.

    // stores the current highest bid for each product.
    mapping(uint => Bid) private bids;

    // stores the balance of each bidder.
    mapping(address => uint) private balance;

    // stores the product id to it's creator
    mapping(uint => address) private productMap;


    // declaring the table schemas
    string private mainTable;
    uint256 private mainTableID;
    string private constant MAIN_TABLE_PREFIX = "product_list";
    string private constant MAIN_SCHEMA =
        "tokenID text, description text, image text, name text, basePrice text, startDate text, endDate text, owner text";

    string private historyTable;
    uint256 private historyTableID;
    string private constant HISTORY_TABLE_PREFIX = "product_history";
    string private constant HISTORY_SCHEMA =
        "tokenID text, bidPrice text, time text, bidder text";

    string private purchaseTable;
    uint256 private purchaseTableID;
    string private constant PURCHASE_TABLE_PREFIX = "product_purchase";
    string private constant PURCHASE_SCHEMA =
        "tokenID text, buyer text, seller text, price text, date text";

    // constructor is called when the contract is deployed.
    // here it is only used to initialize the tableland contract and setup the tables.
    constructor() {
        _baseURIString = "https://testnet.tableland.network/query?s=";
        tablelandContract = TablelandDeployments.get();

        mainTableID = tablelandContract.createTable(
            address(this),
            SQLHelpers.toCreateFromSchema(MAIN_SCHEMA, MAIN_TABLE_PREFIX)
        );

        mainTable = SQLHelpers.toNameFromId(MAIN_TABLE_PREFIX, mainTableID);

        historyTableID = tablelandContract.createTable(
            address(this),
            SQLHelpers.toCreateFromSchema(HISTORY_SCHEMA, HISTORY_TABLE_PREFIX)
        );

        historyTable = SQLHelpers.toNameFromId(
            HISTORY_TABLE_PREFIX,
            historyTableID
        );

        purchaseTableID = tablelandContract.createTable(
            address(this),
            SQLHelpers.toCreateFromSchema(
                PURCHASE_SCHEMA,
                PURCHASE_TABLE_PREFIX
            )
        );

        purchaseTable = SQLHelpers.toNameFromId(
            PURCHASE_TABLE_PREFIX,
            purchaseTableID
        );
    }

    function list_product(
        string memory name,
        string memory description,
        string memory image,
        uint base_price,
        string memory start_date,
        string memory end_date
    ) external {
        // the base price can't be 0
        require(base_price > 0, "Invalid base price");

        // increase the tokenId
        tokenID.increment();

        // set the mapping to null address and base price
        bids[tokenID.current()] = Bid(address(0), base_price);

        // set creator
        productMap[tokenID.current()] = msg.sender;

        // write to table
        string memory insert_statement = SQLHelpers.toInsert(
            MAIN_TABLE_PREFIX,
            mainTableID,
            // "tokenID text, description text, image text, name text, basePrice text, startDate text, endDate text, owner text"
            "tokenID, description, image, name, basePrice, startDate, endDate, owner",
            string.concat(
                SQLHelpers.quote(Strings.toString(tokenID.current())),
                ",",
                SQLHelpers.quote(description),
                ",",
                SQLHelpers.quote(image),
                ",",
                SQLHelpers.quote(name),
                ",",
                SQLHelpers.quote(Strings.toString(base_price)),
                ",",
                SQLHelpers.quote(start_date),
                ",",
                SQLHelpers.quote(end_date),
                ",",
                SQLHelpers.quote(Strings.toHexString(msg.sender))
            )
        );
        runSQL(mainTableID, insert_statement);

        emit Start();
    }

    function bid(
        uint _tokenID,
        string memory time
    ) external payable {
        // the product should exist
        require(productMap[_tokenID] != address(0), "Product not listed");
        // the bid amount should be greater than the base price
        require(msg.value > bids[_tokenID].amount, "value < highest");

        // update the balance of the previous bidder because someone bid higher than them
        if(bids[_tokenID].bidder != address(0)){
            balance[bids[_tokenID].bidder] += bids[_tokenID].amount;
        }

        // update the bid
        bids[_tokenID] = Bid(msg.sender, msg.value);

        // write to table
        string memory insert_statement = SQLHelpers.toInsert(
            HISTORY_TABLE_PREFIX,
            historyTableID,
            // "tokenID text, bidPrice text, time text, bidder text"
            "tokenID, bidPrice, time, bidder",
            string.concat(
                SQLHelpers.quote(Strings.toString(_tokenID)),
                ",",
                SQLHelpers.quote(Strings.toString(msg.value)),
                ",",
                SQLHelpers.quote(time),
                ",",
                SQLHelpers.quote(Strings.toHexString(msg.sender))
            )
        );
        runSQL(historyTableID, insert_statement);

        emit BidMade(msg.sender, msg.value);
    }

    function withdraw() external {
        // check if the balance is greater than 0
        require(balance[msg.sender] > 0, "No balance");
        uint bal = balance[msg.sender];
        balance[msg.sender] = 0;
        (bool success, ) = payable(msg.sender).call{value: bal}("");
        if (!success) {
            revert ("Withdraw Failed");
        }

        emit Withdraw(msg.sender, bal);
    }

    function purchase(
        uint _tokenID,
        string memory time
    ) external {
        // the product should exist
        require(productMap[_tokenID] != address(0), "Product not listed");

        // the product should have a bidder
        require(bids[_tokenID].bidder != address(0), "No bidder");

        // update the balance of the owner to the highest bid
        balance[productMap[_tokenID]] += bids[_tokenID].amount;

        // reset the bid to null and baseprice to 0
        bids[_tokenID].bidder = address(0);
        bids[_tokenID].amount = 0;
        productMap[_tokenID] = address(0);

        // write to table
        string memory insert_statement = SQLHelpers.toInsert(
            PURCHASE_TABLE_PREFIX,
            purchaseTableID,
            // "tokenID text, buyer text, price text, date text"
            "tokenID, buyer, seller, price, date",
            string.concat(
                SQLHelpers.quote(Strings.toString(_tokenID)),
                ",",
                SQLHelpers.quote(Strings.toHexString(msg.sender)),
                ",",
                SQLHelpers.quote(Strings.toHexString(productMap[_tokenID])),
                ",",
                SQLHelpers.quote(Strings.toString(bids[_tokenID].amount)),
                ",",
                SQLHelpers.quote(time)
            )
        );
        runSQL(purchaseTableID, insert_statement);
    }

    // Function to make Insertions , Updates and Deletions to our Tableland Tables
    /// @notice Function to make Insertions , Updates and Deletions to our Tableland Tables
    /// @dev retrieves the value of the tableID and the statement to execute on the table
    function runSQL(uint256 tableID, string memory statement) private {
        tablelandContract.runSQL(address(this), tableID, statement);
    }

    // @return of the tableland gateway prefix link
    function tableURI() internal view returns (string memory) {
        return _baseURIString;
    }

    // @dev returns the link to fetch all the data inside the main nft table
    function mainTableURI() public view returns (string memory) {
        return string.concat(tableURI(), "SELECT%20*%20FROM%20", mainTable);
    }

    // @dev returns the link to fetch all the data inside the main nft table
    function historyTableURI() public view returns (string memory) {
        return string.concat(tableURI(), "SELECT%20*%20FROM%20", historyTable);
    }

    // @dev returns the link to fetch all the data inside the main nft table
    function purchaseTableURI() public view returns (string memory) {
        return string.concat(tableURI(), "SELECT%20*%20FROM%20", purchaseTable);
    }

    // returns tuple of highest bidder and amount
    function getHighestBidder(uint _tokenID) public view returns (Bid memory){
        return bids[_tokenID];
    }

    // returns the balance of the user
    function getBalance(address user) public view returns (uint){
        return balance[user];
    }

    // returns the owner address of the product
    function getProductOwner(uint _tokenID) public view returns(address){
        return productMap[_tokenID];
    }
}
